module Main where

import           Control.Monad      (forM_)
import           System.Environment (getArgs)
import           Text.Printf        (printf)

data My = My
        { c1 :: Int
        , c22 :: String }

fib22 :: Int -> Int
fib22 0 = 1
fib22 1 = 1
fib22 x = fib22 (x - 1) + fib22 (x - 2)

f x =
        let fib = 1
        in fib

main :: IO()
main = do
    args <- getArgs
    let n = case args of
                        [nStr] -> read nStr
                        _ -> 10
        fibs = map (\x -> (x, (fib22 x))) [0..n]
    forM_ fibs (uncurry $ printf "fib %d = %d\n")
    putStrLn "done."
